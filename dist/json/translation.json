{
  "text_welcome_title": "Welcome to Ompluscript",
  "text_welcome_message": "Welcome to new framework, Ompluscript. Ompluscript is new JavaScript & CSS framework, developed for dynamic rendering of web pages. Framework is represented as MVC pattern, designed by TypeScript and Less technologies. It gives opportunity for fast page design (including responsive web design paradigm) and adding logic web application, as forms, translation, and many other features. Even better, code is extensible, so many other, new features can be added easily.",
  "text_home_title": "Home",
  "text_serbian_title": "Serbian",
  "text_english_title": "English",
  "text_getting_started_title": "Getting started",
  "text_getting_started_message": "This section contains basic examples how you can use framework Ompluscript. As mentioned, framework Ompluscript is represented with MVC (Model-View-Controller) architectural pattern, so this section will contain basic information about all tri segments (Model, View and Controller) and also how to setup your final application. Following list contains link for each separate section:",
  "text_model_title": "Model",
  "text_model_message": "Model is first component in framework Ompluscript. It's used as data storage, so it can use it to communicate with web server (Ajax), or with web browsers (SessionStorage and LocalStorage). One model can contains different types of attributes, and each attribute can be used for different types of validation, as represented in next example: <pre>Ompluscript.Model.define({\n  name: \"user\",\n  type: \"Model\",\n  attributes:\n  [\n    {\n      name: \"username\",\n      type: \"String\",\n      requred: true,\n      minimumLength: 8\n    },\n    {\n      name: \"email\",\n      type: \"String\",\n      requred: true,\n      pattern: /^\\S+@\\S+$/\n    },\n    {\n      name: \"birthday\",\n      type: \"Datetime\",\n      minimum: new Date().toISOString()\n    },\n    {\n      name: \"height\",\n      type: \"Number\",\n      minimum: 0,\n      maximum: 250\n    },\n    {\n      name: \"isAdmin\",\n      type: \"Boolean\",\n      requred: true\n    }\n  ]\n  proxies:\n  [\n    {\n      type: \"AjaxProxy\"\n    },\n    {\n      type: \"LocalStorageProxy\"\n    },\n    {\n      type: \"SessionStorageProxy\"\n    }\n  ]\n});</pre>",
  "text_model_explanation_message": "Example from above shows how you should use framework to define basic model, in this case model for user. It contains five different attributes, for username, email, birthday, height and delimiter that explains if user is admin. All of them have their desired type, such as String, Number, Datetime and Boolean. Additionally, there also defined proxies, that you can use for communication between application and web browser/web server.",
  "text_view_title": "View",
  "text_view_message": "View, in framework Ompluscript, represents component which is responsible for presentation inside browser. This components have access to Model, and it waits for signal from it, so it can updates data for presentation. View is consisted of numerous different presentation elements, which can be containers for other components, like pages, as well as some elements for direct communications with user, like inputs. Bellow you can find some example for, used just for this page: <pre>Ompluscript.View.define({\n  type: \"Page\",\n  name: \"/getting-started/view\",\n  layout:\n  {\n    type: \"LinearLayout\",\n    direction: \"vertical\"\n  },\n  children:\n  [\n    {\n      type: \"Header\",\n      name: \"view_title\",\n      text: \"text_view_title\"\n    },\n    {\n      type: \"Paragraph\",\n      name: \"view_message\",\n      text: \"text_view_message\"\n    },\n    {\n      type: \"Paragraph\",\n      name: \"view_explanation_message\",\n      text: \"text_view_explanation_message\"\n    }\n  ]\n});</pre>",
  "text_view_explanation_message": "Above you can see basic usage for View component. Component Page is container, which name also describes a link for desired page. Page also has defined layout, which will be described in other sections, and three children element: one header and two paragraph. As you can see, all of those children have special attribute named \"text\n, which is used as key for translation.",
  "text_controller_title": "Controller",
  "text_controller_message": "Controller is third component in framework Ompluscript. It contains all of the logic in application, and it can communicate with both Model and View. For the purpose of this framework, there is two separate types of Controllers: Application and Page controllers. Application controller is used two describe whole application nad it will presented in next section. Page controller is needed in cases when some additional logic for Page is desired, and it should be implemented via actions, as described bellow:<pre>Ompluscript.Controller.define({\n  type: \"PageController\",\n  page:\n  {\n    type: \"Page\",\n    name: \"/search\",\n    ...\n  },\n  actions:\n  {\n    user: function(id) {,\n      ...\n    },\n    all: function() {\n      ...\n    }\n  }\n});</pre>",
  "text_controller_explanation_message": "In definition above, Page controller is introduces. It contains definition for one page, and it should be similar as one described in View section. Additionally, it contains actions, in this case two of them: \"users\" and \"all\". Both of those actions are represented in address bar (eg. \"/search/all\"), and they are actually functions which should be called when link is described in address bar.",
  "text_application_title": "Application",
  "text_application_message": "Application is represented as just one type of Controller, but in this case, this type of controller describer all components (names of JavaScript files) that should be fetched during the process of initialization. This definition should be placed inside main JavaScript file which should be the only one called from main HTML file. Other JavaScript files are defined inside this kind of controller, as described below: <pre>Ompluscript.application({\n  components: [\"configuration\", \"homepage\", \"getting-started\", \"layouts\", \"form\", \"table\"],\n  events:\n  {\n    onComponentLoad: function (event) {\n      if (event.getComponent() === \"configuration\") {\n        Ompluscript.Model.Creator.getInstance().getTranslation().getProxy(\"AjaxProxy\").select();\n      }\n    }\n  }\n});</pre>",
  "text_application_explanation_message": "As you can see above, there is an example for application's configuration, similar to other ones. In this case, there is a list of components, which represents names of JavaScript file, placed inside \n/app/\n folder (with absoluth path), and they are all called in defined order. Also, there is one event defined - one which is called after each component is loaded. In this case, after first \"/app/configuration.js\" file is loaded, there is an request for translation container to fetch all translations from server, via its Ajax proxy.",
  "text_layouts_title": "Layouts",
  "text_layouts_message": "This section contains description for core of Ompluscript design - layouts. With layouts, you can create various page designs, choosing the one that fits the best for web page purpose. In framework Ompluscript, there are (currently) 4 different layouts:",
  "text_null_layout_title": "Null Layout",
  "text_null_layout_message": "Null Layout represents the simplest layout as it just place components one bellow another.",
  "text_null_layout_message_2": "Null Layout is default layout for each component, so it's not necessary to use special configuration for it.",
  "text_relative_layout_title": "Relative Layout",
  "text_relative_layout_message": "Although Relative Layout is not good choice when you want to use responsive web design, still there are some cases when you want to add string position for component, like in this case: <pre>{\n  ...\n  styles:\n  {\n    top: \"50px\",\n    left: \"100px\",\n    width: \"200px\"\n  }\n}</pre>",
  "text_relative_layout_configuration": "To setup Relative Layout, just place next configuration as part of single container:<pre>{\n  ...\n  layout:\n  {\n    type: \"RelativeLayout\",\n  }\n}</pre>",
  "text_linear_layout_title": "Linear Layout",
  "text_linear_layout_message": "Linear Layout defines a container where you can place components in desired directions: top-to-bottom, bottom-to-top, right-to-left, left-to-right. In this case, direction right-to-left is used, as you can see in example on the left:",
  "text_linear_layout_configuration": "<pre>{\n  ...\n  layout:\n  {\n    type: \"LinearLayout\",\n    reverse: true\n  }\n}</pre>",
  "text_linear_layout_message_2": "In this case it's possible to use vertical direction, as something defined in following configuration:",
  "text_linear_layout_configuration_2": "<pre>{\n  ...\n  layout:\n  {\n    type: \"LinearLayout\",\n    \"direction\": \"vertical\",\n    \"align\": \"end\"\n  }\n}</pre>",
  "text_table_layout_title": "Table Layout",
  "text_table_layout_1_1_message": "Table Layout represents Layout in form of table, where it's possible to define number of rows and cells.",
  "text_table_layout_configuration": "To setup Table Layout, place following configuration as part of component that should contain other components: <pre>{\n  ...\n  layout:\n  {\n    type: \"TableLayout\",\n    rows: 3,\n    cells: 2\n  }\n}</pre>",
  "text_table_layout_2_1_message": "In case of Table Layout, amount of children components can't be bigger than number of rows times number of cells.",
  "text_table_layout_2_2_message": "Regarding children components, each one of them will be placed in desired order as defined in configuration: first one in first cell of first row, second one in second cell of first row, etc.",
  "text_table_layout_3_1_message": "Each cell gets desired, same width, depending on number of cells per row.",
  "text_table_layout_3_2_message": "Watch out about cells' contents, as that can be a problem for implementing responsive web design paradigm.",
  "text_advanced_technique_title": "Advanced technique",
  "text_navigation_title": "Navigation",
  "text_navigation_message": "Navigation is one of core features in framework Ompluscript. Complete logic is handled by internal controller, which can't be configurable, but there is special View which represents main navigation. If it's not configured, main navigation is automatically created with links for all pages in one main line. But, if it's configured, new configuration will override default one, as one represented in nex example: <pre>Ompluscript.View.define({\n  type: \"Navigation\",\n  children:\n  [\n    {\n      type: \"PageLink\",\n      name: \"homepage\",\n      text: \"text_homepage_title,\n      page: \"/homepage\"\n    },\n    {\n      type: \"List\",\n      name: \"submenu\",\n      children:[\n        {\n          type: \"PageLink\",\n          name: \"terms\",\n          text: \"text_terms_title\",\n          page: \"/terms\"\n        },\n        {\n          type: \"PageLink\",\n          name: \"about\",\n          text: \"text_about_title\",\n          page: \"/about\"\n        }\n      ]\n    }\n  ]\n});</pre>",
  "text_navigation_explanation_message": "In example above, there is simple configuration for main navigation. As you can see, it's provided option to have link i single line, as well as sub-menus. For single link, in first level for children, just use PageLink component. But, in case for sub-menus, List component should be provided - in that case, first child of List component will be represented as main element in first line of navigation, and other as elements of sub-menu.",
  "text_translation_title": "Translation",
  "text_translation_message": "Translation is handled by internal type of model, which is always defined by application, if it's not defined by some configuration. Default translation container has always one proxy - AjaxProxy, and it's strictly recommended to have this proxy in manual configuration, as it is the only eay to fetch translation from server. Bellow is one example for translation container: <pre>Ompluscript.Model.define({\n  type: \"Translation\",\n  proxies:\n  [\n    {\n      type: \"AjaxProxy\",\n      selectLink: \"/json/translation.json\"\n    }\n  ]\n});</pre>",
  "text_translation_explanation_message": "In example above there is simple example for translation container. In this case, there is one proxy, AjaxProxy, with defined url for fetching translation from web server. This is represented with attribute \"selectLink\".",
  "text_form_title": "Form",
  "text_form_message": "For is one of the main components in framework Ompluscript. It should be used for any kind of communications with web server, when user needs to send some data to web server. Basic example for form is visible bellow, with some validation rules, defined by containing model:",
  "text_form_configuration": "Example above is represented with configuration bellow. Form container should contain main two parts: children and model. Model represents validation attributes and AjaxProxy for communication with server. Second part, children, represents inputs that should be given to user to fill them with desired data. Additionally, there two main attributes in configuration: \"buttonAsset\" to define translation asset for submit button, and \"proxy\" to represent type of action for AjaxProxy (it's possible to use save, update and delete action).<pre>Ompluscript.View.define({\n  type: \"Form\",\n  name: \"text_form_title\",\n  proxy: \"save\",\n  buttonAsset: \"text_register_title\",\n  styles:\n  {\n    \"max-width\": \"400px\"\n  },\n  model:\n  {\n    type: \"Model\",\n    name: \"model\",\n    attributes:\n    [\n      {\n        type: \"String\",\n        name: \"first_name\",\n        required: true\n      },\n      {\n        type: \"String\",\n        name: \"last_name\",\n        required: true\n      },\n      {\n        type: \"String\",\n        name: \"user_name\",\n        required: true,\n        minimumLength: 8\n      },\n      {\n        type: \"String\",\n        name: \"email\",\n        required: true,\n        pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      },\n      {\n        type: \"String\",\n        name: \"password\",\n        required: true,\n        minimumLength: 8},\n      {\n        type: \"Datetime\",\n        name: \"birthday\",\n        required: true,\n        maximum: new Date().toISOString()\n      },\n      {\n        type: \"Number\",\n        name: \"height\",\n        minimum: 0,\n        maximum: 250\n      },\n      {\n        type: \"Number\",\n        name: \"weight\",\n        minimum: 0,\n        maximum: 250\n      }\n    ],\n    proxies:\n    [\n      {\n        type: \"AjaxProxy\",\n        saveLink: \"/json/success.json\"\n      }\n    ]\n  },\n  children:\n  [\n    {\n      type: \"TextInput\",\n      name: \"first_name\",\n      placeholder: \"text_first_name_title\"\n    },\n    {\n      type: \"TextInput\",\n      name: \"last_name\",\n      placeholder: \"text_last_name_title\"\n    },\n    {\n      type: \"TextInput\",\n      name: \"user_name\",\n      placeholder: \"text_user_name_title\"\n    },\n    {\n      type: \"EmailInput\",\n      name: \"email\",\n      placeholder: \"text_email_title\"\n    },\n    {\n      type: \"PasswordInput\",\n      name: \"password\",\n      placeholder: \"text_password_title\"\n    },\n    {\n      type: \"DateInput\",\n      name: \"birthday\",\n      placeholder: \"text_birthday_title\"\n    },\n    {\n      type: \"NumberInput\",\n      name: \"height\",\n      placeholder: \"text_height_title\"\n    },\n    {\n      type: \"NumberInput\",\n      name: \"weight\",\n      placeholder: \"text_weight_title\"\n    }\n  ]\n});</pre>",
  "text_form_title.failed": "Something went wrong. Please try again.",
  "text_first_name_title": "First name",
  "first_name.102": "First name must be set.",
  "text_last_name_title": "Last name",
  "last_name.102": "Last name must be set.",
  "text_user_name_title": "Username",
  "user_name.102": "Username must be set.",
  "user_name.211": "Username must have at least 8 characters.",
  "text_email_title": "Email address",
  "email.102": "Email must be set.",
  "email.221": "Must be in email format.",
  "text_password_title": "Password",
  "password.102": "Password must be set.",
  "password.211": "Password must have at least 8 characters.",
  "text_birthday_title": "Birthday",
  "birthday.102": "Birthday must be set.",
  "birthday.202": "Birthday can't be in future.",
  "text_height_title": "Height",
  "height.201": "Height can't be bellow 0.",
  "height.202": "Height can't be over 250.",
  "text_weight_title": "Weight",
  "weight.201": "Weight can't be bellow 0.",
  "weight.202": "Weight can't be over 250.",
  "text_register_title": "Register",
  "text_404_error_title": "Page not found",
  "text_table_title": "Tables & actions",
  "text_table_message": "This section contains example for table and actions. Tables are special component in framework Ompluscript where it's possible to place desired data with table container, as model. Action are already explained in sections related to controllers, and bellow you can find a links which map for this page and two additional, for two cases of page action.",
  "text_table_configuration": "Example from above (table), is represented with right configuration bellow. In this configuration, you can see that there are three main attributes: table, to represent table container for attributes, as well as headers and cells children to define header elements and type of elements in each row. <pre>Ompluscript.Controller.define({\n  type: \"TableContainer\",\n  name: \"table\",\n  table:\n  {\n    type: \"Table\",\n    name: \"table\",\n    attributes:\n    [\n      {\n        type: \"String\",\n        name: \"user_name\"\n      },\n      {\n        type: \"String\",\n        name: \"first_name\"\n      },\n      {\n        type: \"String\",\n        name: \"last_name\"\n      },\n      {\n        type: \"String\",\n        name: \"birthday\"\n      }\n    ],\n    proxies:\n    [\n      {\n        type: \"AjaxProxy\",\n        selectLink: \"/json/users.json\"\n      }\n    ]\n  },\n  headers:\n  [\n    {\n      type: \"Label\",\n      name: \"user_name\",\n      text: \"text_user_name_title\"\n    },\n    {\n      type: \"Label\",\n      name: \"first_name\",\n      text: \"text_first_name_title\"\n    },\n    {\n      type: \"Label\",\n      name: \"last_name\",\n      text: \"text_last_name_title\"\n    },\n    {\n      type: \"Label\",\n      name: \"birthday\",\n      text: \"text_birthday_title\"\n    }\n  ],\n  cells:\n  [\n    {\n      type: \"LabelInput\",\n      name: \"user_name\"\n    },\n    {\n      type: \"LabelInput\",\n      name: \"first_name\"\n    },\n    {\n      type: \"LabelInput\",\n      name: \"last_name\"\n    },\n    {\n      type: \"LabelInput\",\n      name: \"birthday\"\n    }\n  ]\n});</pre>",
  "text_all_users_title": "All users",
  "text_online_users_title": "Online users",
  "text_offline_users_title": "Offline users",
  "text_about_title": "About",
  "text_about_message": "Framework Ompluscrpt is created for purpose of final thesis on Metropolitan University, Belgrade, Serbia, by student Marko Milojevic (id 2604). Everything used inside this presentation is only for academic purpose and further development of code."
}